# pylint: skip-file
from typing import Tuple, Union, overload

class rf24_crclength_e:
    RF24_CRC_DISABLED: int = 0
    RF24_CRC_8: int = 1
    RF24_CRC_16: int = 2

RF24_CRC_DISABLED: int = rf24_crclength_e.RF24_CRC_DISABLED
RF24_CRC_8: int = rf24_crclength_e.RF24_CRC_8
RF24_CRC_16: int = rf24_crclength_e.RF24_CRC_16

class rf24_datarate_e:
    RF24_1MBPS: int = 0
    RF24_2MBPS: int = 1
    RF24_250KBPS: int = 2

RF24_1MBPS: int = rf24_datarate_e.RF24_1MBPS
RF24_2MBPS: int = rf24_datarate_e.RF24_2MBPS
RF24_250KBPS: int = rf24_datarate_e.RF24_250KBPS

class rf24_pa_dbm_e:
    RF24_PA_MIN: int = 0
    RF24_PA_LOW: int = 1
    RF24_PA_HIGH: int = 2
    RF24_PA_MAX: int = 3

RF24_PA_MIN: int = rf24_pa_dbm_e.RF24_PA_MIN
RF24_PA_LOW: int = rf24_pa_dbm_e.RF24_PA_LOW
RF24_PA_HIGH: int = rf24_pa_dbm_e.RF24_PA_HIGH
RF24_PA_MAX: int = rf24_pa_dbm_e.RF24_PA_MAX

class RF24:
    @overload
    def __init__(self, ce_pin: int, csn_pin: int, spi_speed: int = 10000000): ...
    @overload
    def __init__(self, spi_speed: int = 10000000): ...
    def available(self) -> bool: ...
    def available_pipe(self) -> Tuple[bool, int]: ...
    @overload
    def begin(self) -> bool: ...
    @overload
    def begin(self, ce_pin: int = None, csn_pin: int = None) -> bool: ...
    def close_rx_pipe(self, pipe_number: int): ...
    def enable_dynamic_ack(self): ...
    def flush_rx(self): ...
    def flush_tx(self): ...
    def get_arc(self) -> int: ...
    def get_dynamic_payload_size(self) -> int: ...
    # def get_pa_level(self) -> int: ...
    def is_fifo(self, about_tx: bool, check_empty: bool = None) -> Union[bool, int]: ...
    def mask_irq(self, tx_ok: bool, tx_fail: bool, rx_ready: bool): ...
    def open_tx_pipe(self, address: Union[bytes, bytearray]): ...
    def open_rx_pipe(self, number: int, address: Union[bytes, bytearray]): ...
    def print_details(self): ...
    def print_pretty_details(self): ...
    def read(self, length: int) -> bytearray: ...
    def reuse_tx(self): ...
    @overload
    def set_auto_ack(self, number: int, enable: bool): ...
    @overload
    def set_auto_ack(self, enable: bool): ...
    def set_pa_level(self, level: rf24_pa_dbm_e, lna_enable: bool = True): ...
    def set_retries(self, delay: int, count: int): ...
    def set_radiation(
        self, level: rf24_pa_dbm_e, speed: rf24_datarate_e, lna_enable: bool = True
    ): ...
    def sprintf_pretty_details(self) -> str: ...
    def start_const_carrier(self): ...
    def start_fast_write(
        self,
        buf: Union[bytearray, bytes],
        multicast: bool = False,
        start_tx: bool = True,
    ): ...
    def start_write(
        self, buf: Union[bytearray, bytes], multicast: bool = False
    ) -> bool: ...
    def stop_const_carrier(self): ...
    def toggle_all_pipes(self, enable: bool): ...
    def tx_standby(self, timeout: int = None, start_tx: bool = True) -> bool: ...
    def what_happened(self) -> Tuple[bool, bool, bool]: ...
    def write(self, buf: Union[bytearray, bytes], multicast: bool = False) -> bool: ...
    def write_ack_payload(self, pipe: int, buf: Union[bytearray, bytes]) -> bool: ...
    def write_blocking(self, buf: Union[bytearray, bytes], timeout: int) -> bool: ...
    def write_fast(
        self, buf: Union[bytearray, bytes], multicast: bool = False
    ) -> bool: ...
    @property
    def ack_payloads(self) -> bool: ...
    @ack_payloads.setter
    def ack_payloads(self, enable: bool): ...
    @property
    def address_width(self) -> int: ...
    @address_width.setter
    def address_width(self, length: int): ...
    @property
    def channel(self) -> int: ...
    @channel.setter
    def channel(self, value: int): ...
    @property
    def crc_length(self) -> int: ...
    @crc_length.setter
    def crc_length(self, value: rf24_crclength_e): ...
    @property
    def cs_delay(self) -> int: ...
    @cs_delay.setter
    def cs_delay(self, value: int): ...
    @property
    def data_rate(self) -> int: ...
    @data_rate.setter
    def data_rate(self, value: rf24_datarate_e): ...
    @property
    def dynamic_payloads(self) -> bool: ...
    @dynamic_payloads.setter
    def dynamic_payloads(self, value: bool): ...
    @property
    def failure_detected(self) -> int: ...
    @property
    def is_chip_connected(self) -> bool: ...
    @property
    def is_plus_variant(self) -> bool: ...
    @property
    def is_valid(self) -> bool: ...
    @property
    def listen(self) -> bool: ...
    @listen.setter
    def listen(self, is_rx: bool): ...
    @property
    def payload_size(self) -> int: ...
    @payload_size.setter
    def payload_size(self, length: int): ...
    @property
    def pa_level(self) -> rf24_pa_dbm_e: ...
    @pa_level.setter
    def pa_level(self, level: rf24_pa_dbm_e): ...
    @property
    def power(self) -> bool: ...
    @power.setter
    def power(self, is_on: bool): ...
    @property
    def rpd(self) -> bool: ...
